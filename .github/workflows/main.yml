name: Comptaquest CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install uv
          uv init
          uv add django wagtail
          uv sync
      
      - name: Prepare environment
        run: |
          # cp .env.example .env
          # python manage.py migrate
          # python manage.py collectstatic --noinput
      
  code-quality:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install Flake8
        run: |
          uv add flake8
      - name: Run code quality checks
        run: |
          uv run flake8 .
          mypy
          uv run black . --check
          uv run isort . --check --diff
  
  performance-checks:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run performance checks
        run: |
          pytest --benchmark-only
  
  unit-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run unit tests
        run: |
          uv add pytest pytest-django pytest-cov
          export DJANGO_SETTINGS_MODULE=config.settings.dev
          uv run pytest tests/unit --cov=comptaquest --cov-report=xml
          bandit -r comptaquest
          # safety check

  integration-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run integration tests
        run: |
          # uv pip install pytest-django pytest-cov
          pytest tests/integration --cov=comptaquest --cov-report=xml
          bandit -r comptaquest
          safety check

  deploy:
    needs: [unit-tests, integration-tests, performance-checks, code-quality]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build and deploy
        if: github.ref == 'refs/heads/main'
        run: |
          # Exemple de déploiement (à adapter)
          echo "Déploiement en cours..."
          # Ajoutez vos commandes de déploiement ici
          # Exemple pour un déploiement sur un serveur :
          # scp -r . user@server:/path/to/deploy
          # ssh user@server "cd /path/to/deploy && docker-compose up -d"